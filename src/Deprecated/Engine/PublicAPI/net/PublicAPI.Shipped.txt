Microsoft.Build.BuildEngine.BuildItem
Microsoft.Build.BuildEngine.BuildItem.BuildItem(string itemName, Microsoft.Build.Framework.ITaskItem taskItem) -> void
Microsoft.Build.BuildEngine.BuildItem.BuildItem(string itemName, string itemInclude) -> void
Microsoft.Build.BuildEngine.BuildItem.Clone() -> Microsoft.Build.BuildEngine.BuildItem
Microsoft.Build.BuildEngine.BuildItem.Condition.get -> string
Microsoft.Build.BuildEngine.BuildItem.Condition.set -> void
Microsoft.Build.BuildEngine.BuildItem.CopyCustomMetadataTo(Microsoft.Build.BuildEngine.BuildItem destinationItem) -> void
Microsoft.Build.BuildEngine.BuildItem.CustomMetadataCount.get -> int
Microsoft.Build.BuildEngine.BuildItem.CustomMetadataNames.get -> System.Collections.ICollection
Microsoft.Build.BuildEngine.BuildItem.Exclude.get -> string
Microsoft.Build.BuildEngine.BuildItem.Exclude.set -> void
Microsoft.Build.BuildEngine.BuildItem.FinalItemSpec.get -> string
Microsoft.Build.BuildEngine.BuildItem.GetEvaluatedMetadata(string metadataName) -> string
Microsoft.Build.BuildEngine.BuildItem.GetMetadata(string metadataName) -> string
Microsoft.Build.BuildEngine.BuildItem.HasMetadata(string metadataName) -> bool
Microsoft.Build.BuildEngine.BuildItem.Include.get -> string
Microsoft.Build.BuildEngine.BuildItem.Include.set -> void
Microsoft.Build.BuildEngine.BuildItem.IsImported.get -> bool
Microsoft.Build.BuildEngine.BuildItem.MetadataCount.get -> int
Microsoft.Build.BuildEngine.BuildItem.MetadataNames.get -> System.Collections.ICollection
Microsoft.Build.BuildEngine.BuildItem.Name.get -> string
Microsoft.Build.BuildEngine.BuildItem.Name.set -> void
Microsoft.Build.BuildEngine.BuildItem.RemoveMetadata(string metadataName) -> void
Microsoft.Build.BuildEngine.BuildItem.SetMetadata(string metadataName, string metadataValue) -> void
Microsoft.Build.BuildEngine.BuildItem.SetMetadata(string metadataName, string metadataValue, bool treatMetadataValueAsLiteral) -> void
Microsoft.Build.BuildEngine.BuildItemGroup
Microsoft.Build.BuildEngine.BuildItemGroup.AddNewItem(string itemName, string itemInclude) -> Microsoft.Build.BuildEngine.BuildItem
Microsoft.Build.BuildEngine.BuildItemGroup.AddNewItem(string itemName, string itemInclude, bool treatItemIncludeAsLiteral) -> Microsoft.Build.BuildEngine.BuildItem
Microsoft.Build.BuildEngine.BuildItemGroup.BuildItemGroup() -> void
Microsoft.Build.BuildEngine.BuildItemGroup.Clear() -> void
Microsoft.Build.BuildEngine.BuildItemGroup.Clone(bool deepClone) -> Microsoft.Build.BuildEngine.BuildItemGroup
Microsoft.Build.BuildEngine.BuildItemGroup.Condition.get -> string
Microsoft.Build.BuildEngine.BuildItemGroup.Condition.set -> void
Microsoft.Build.BuildEngine.BuildItemGroup.Count.get -> int
Microsoft.Build.BuildEngine.BuildItemGroup.GetEnumerator() -> System.Collections.IEnumerator
Microsoft.Build.BuildEngine.BuildItemGroup.IsImported.get -> bool
Microsoft.Build.BuildEngine.BuildItemGroup.RemoveItem(Microsoft.Build.BuildEngine.BuildItem itemToRemove) -> void
Microsoft.Build.BuildEngine.BuildItemGroup.RemoveItemAt(int index) -> void
Microsoft.Build.BuildEngine.BuildItemGroup.this[int index].get -> Microsoft.Build.BuildEngine.BuildItem
Microsoft.Build.BuildEngine.BuildItemGroup.ToArray() -> Microsoft.Build.BuildEngine.BuildItem[]
Microsoft.Build.BuildEngine.BuildItemGroupCollection
Microsoft.Build.BuildEngine.BuildItemGroupCollection.CopyTo(System.Array array, int index) -> void
Microsoft.Build.BuildEngine.BuildItemGroupCollection.Count.get -> int
Microsoft.Build.BuildEngine.BuildItemGroupCollection.GetEnumerator() -> System.Collections.IEnumerator
Microsoft.Build.BuildEngine.BuildItemGroupCollection.IsSynchronized.get -> bool
Microsoft.Build.BuildEngine.BuildItemGroupCollection.SyncRoot.get -> object
Microsoft.Build.BuildEngine.BuildProperty
Microsoft.Build.BuildEngine.BuildProperty.BuildProperty(string propertyName, string propertyValue) -> void
Microsoft.Build.BuildEngine.BuildProperty.Clone(bool deepClone) -> Microsoft.Build.BuildEngine.BuildProperty
Microsoft.Build.BuildEngine.BuildProperty.Condition.get -> string
Microsoft.Build.BuildEngine.BuildProperty.Condition.set -> void
Microsoft.Build.BuildEngine.BuildProperty.FinalValue.get -> string
Microsoft.Build.BuildEngine.BuildProperty.IsImported.get -> bool
Microsoft.Build.BuildEngine.BuildProperty.Name.get -> string
Microsoft.Build.BuildEngine.BuildProperty.Value.get -> string
Microsoft.Build.BuildEngine.BuildProperty.Value.set -> void
Microsoft.Build.BuildEngine.BuildPropertyGroup
Microsoft.Build.BuildEngine.BuildPropertyGroup.AddNewProperty(string propertyName, string propertyValue) -> Microsoft.Build.BuildEngine.BuildProperty
Microsoft.Build.BuildEngine.BuildPropertyGroup.AddNewProperty(string propertyName, string propertyValue, bool treatPropertyValueAsLiteral) -> Microsoft.Build.BuildEngine.BuildProperty
Microsoft.Build.BuildEngine.BuildPropertyGroup.BuildPropertyGroup() -> void
Microsoft.Build.BuildEngine.BuildPropertyGroup.BuildPropertyGroup(Microsoft.Build.BuildEngine.Project parentProject) -> void
Microsoft.Build.BuildEngine.BuildPropertyGroup.Clear() -> void
Microsoft.Build.BuildEngine.BuildPropertyGroup.Clone(bool deepClone) -> Microsoft.Build.BuildEngine.BuildPropertyGroup
Microsoft.Build.BuildEngine.BuildPropertyGroup.Condition.get -> string
Microsoft.Build.BuildEngine.BuildPropertyGroup.Condition.set -> void
Microsoft.Build.BuildEngine.BuildPropertyGroup.Count.get -> int
Microsoft.Build.BuildEngine.BuildPropertyGroup.GetEnumerator() -> System.Collections.IEnumerator
Microsoft.Build.BuildEngine.BuildPropertyGroup.IsImported.get -> bool
Microsoft.Build.BuildEngine.BuildPropertyGroup.RemoveProperty(Microsoft.Build.BuildEngine.BuildProperty property) -> void
Microsoft.Build.BuildEngine.BuildPropertyGroup.RemoveProperty(string propertyName) -> void
Microsoft.Build.BuildEngine.BuildPropertyGroup.SetImportedPropertyGroupCondition(string condition) -> void
Microsoft.Build.BuildEngine.BuildPropertyGroup.SetProperty(string propertyName, string propertyValue) -> void
Microsoft.Build.BuildEngine.BuildPropertyGroup.SetProperty(string propertyName, string propertyValue, bool treatPropertyValueAsLiteral) -> void
Microsoft.Build.BuildEngine.BuildPropertyGroup.this[string propertyName].get -> Microsoft.Build.BuildEngine.BuildProperty
Microsoft.Build.BuildEngine.BuildPropertyGroup.this[string propertyName].set -> void
Microsoft.Build.BuildEngine.BuildPropertyGroupCollection
Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.CopyTo(System.Array array, int index) -> void
Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.Count.get -> int
Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.GetEnumerator() -> System.Collections.IEnumerator
Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.IsSynchronized.get -> bool
Microsoft.Build.BuildEngine.BuildPropertyGroupCollection.SyncRoot.get -> object
Microsoft.Build.BuildEngine.BuildSettings
Microsoft.Build.BuildEngine.BuildSettings.DoNotResetPreviouslyBuiltTargets = 1 -> Microsoft.Build.BuildEngine.BuildSettings
Microsoft.Build.BuildEngine.BuildSettings.None = 0 -> Microsoft.Build.BuildEngine.BuildSettings
Microsoft.Build.BuildEngine.BuildTask
Microsoft.Build.BuildEngine.BuildTask.AddOutputItem(string taskParameter, string itemName) -> void
Microsoft.Build.BuildEngine.BuildTask.AddOutputProperty(string taskParameter, string propertyName) -> void
Microsoft.Build.BuildEngine.BuildTask.Condition.get -> string
Microsoft.Build.BuildEngine.BuildTask.Condition.set -> void
Microsoft.Build.BuildEngine.BuildTask.ContinueOnError.get -> bool
Microsoft.Build.BuildEngine.BuildTask.ContinueOnError.set -> void
Microsoft.Build.BuildEngine.BuildTask.Execute() -> bool
Microsoft.Build.BuildEngine.BuildTask.GetParameterNames() -> string[]
Microsoft.Build.BuildEngine.BuildTask.GetParameterValue(string attributeName) -> string
Microsoft.Build.BuildEngine.BuildTask.HostObject.get -> Microsoft.Build.Framework.ITaskHost
Microsoft.Build.BuildEngine.BuildTask.HostObject.set -> void
Microsoft.Build.BuildEngine.BuildTask.Name.get -> string
Microsoft.Build.BuildEngine.BuildTask.SetParameterValue(string parameterName, string parameterValue) -> void
Microsoft.Build.BuildEngine.BuildTask.SetParameterValue(string parameterName, string parameterValue, bool treatParameterValueAsLiteral) -> void
Microsoft.Build.BuildEngine.BuildTask.Type.get -> System.Type
Microsoft.Build.BuildEngine.ColorResetter
Microsoft.Build.BuildEngine.ColorSetter
Microsoft.Build.BuildEngine.ConfigurableForwardingLogger
Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.BuildEventRedirector.get -> Microsoft.Build.Framework.IEventRedirector
Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.BuildEventRedirector.set -> void
Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.ConfigurableForwardingLogger() -> void
Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource, int nodeCount) -> void
Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.NodeId.get -> int
Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.NodeId.set -> void
Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.Parameters.get -> string
Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.Parameters.set -> void
Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.Verbosity.get -> Microsoft.Build.Framework.LoggerVerbosity
Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.Verbosity.set -> void
Microsoft.Build.BuildEngine.ConsoleLogger
Microsoft.Build.BuildEngine.ConsoleLogger.ApplyParameter(string parameterName, string parameterValue) -> void
Microsoft.Build.BuildEngine.ConsoleLogger.BuildFinishedHandler(object sender, Microsoft.Build.Framework.BuildFinishedEventArgs e) -> void
Microsoft.Build.BuildEngine.ConsoleLogger.BuildStartedHandler(object sender, Microsoft.Build.Framework.BuildStartedEventArgs e) -> void
Microsoft.Build.BuildEngine.ConsoleLogger.ConsoleLogger() -> void
Microsoft.Build.BuildEngine.ConsoleLogger.ConsoleLogger(Microsoft.Build.Framework.LoggerVerbosity verbosity) -> void
Microsoft.Build.BuildEngine.ConsoleLogger.ConsoleLogger(Microsoft.Build.Framework.LoggerVerbosity verbosity, Microsoft.Build.BuildEngine.WriteHandler write, Microsoft.Build.BuildEngine.ColorSetter colorSet, Microsoft.Build.BuildEngine.ColorResetter colorReset) -> void
Microsoft.Build.BuildEngine.ConsoleLogger.CustomEventHandler(object sender, Microsoft.Build.Framework.CustomBuildEventArgs e) -> void
Microsoft.Build.BuildEngine.ConsoleLogger.ErrorHandler(object sender, Microsoft.Build.Framework.BuildErrorEventArgs e) -> void
Microsoft.Build.BuildEngine.ConsoleLogger.MessageHandler(object sender, Microsoft.Build.Framework.BuildMessageEventArgs e) -> void
Microsoft.Build.BuildEngine.ConsoleLogger.Parameters.get -> string
Microsoft.Build.BuildEngine.ConsoleLogger.Parameters.set -> void
Microsoft.Build.BuildEngine.ConsoleLogger.ProjectFinishedHandler(object sender, Microsoft.Build.Framework.ProjectFinishedEventArgs e) -> void
Microsoft.Build.BuildEngine.ConsoleLogger.ProjectStartedHandler(object sender, Microsoft.Build.Framework.ProjectStartedEventArgs e) -> void
Microsoft.Build.BuildEngine.ConsoleLogger.ShowSummary.get -> bool
Microsoft.Build.BuildEngine.ConsoleLogger.ShowSummary.set -> void
Microsoft.Build.BuildEngine.ConsoleLogger.SkipProjectStartedText.get -> bool
Microsoft.Build.BuildEngine.ConsoleLogger.SkipProjectStartedText.set -> void
Microsoft.Build.BuildEngine.ConsoleLogger.TargetFinishedHandler(object sender, Microsoft.Build.Framework.TargetFinishedEventArgs e) -> void
Microsoft.Build.BuildEngine.ConsoleLogger.TargetStartedHandler(object sender, Microsoft.Build.Framework.TargetStartedEventArgs e) -> void
Microsoft.Build.BuildEngine.ConsoleLogger.TaskFinishedHandler(object sender, Microsoft.Build.Framework.TaskFinishedEventArgs e) -> void
Microsoft.Build.BuildEngine.ConsoleLogger.TaskStartedHandler(object sender, Microsoft.Build.Framework.TaskStartedEventArgs e) -> void
Microsoft.Build.BuildEngine.ConsoleLogger.Verbosity.get -> Microsoft.Build.Framework.LoggerVerbosity
Microsoft.Build.BuildEngine.ConsoleLogger.Verbosity.set -> void
Microsoft.Build.BuildEngine.ConsoleLogger.WarningHandler(object sender, Microsoft.Build.Framework.BuildWarningEventArgs e) -> void
Microsoft.Build.BuildEngine.ConsoleLogger.WriteHandler.get -> Microsoft.Build.BuildEngine.WriteHandler
Microsoft.Build.BuildEngine.ConsoleLogger.WriteHandler.set -> void
Microsoft.Build.BuildEngine.DistributedFileLogger
Microsoft.Build.BuildEngine.DistributedFileLogger.BuildEventRedirector.get -> Microsoft.Build.Framework.IEventRedirector
Microsoft.Build.BuildEngine.DistributedFileLogger.BuildEventRedirector.set -> void
Microsoft.Build.BuildEngine.DistributedFileLogger.DistributedFileLogger() -> void
Microsoft.Build.BuildEngine.DistributedFileLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource) -> void
Microsoft.Build.BuildEngine.DistributedFileLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource, int nodeCount) -> void
Microsoft.Build.BuildEngine.DistributedFileLogger.NodeId.get -> int
Microsoft.Build.BuildEngine.DistributedFileLogger.NodeId.set -> void
Microsoft.Build.BuildEngine.DistributedFileLogger.Parameters.get -> string
Microsoft.Build.BuildEngine.DistributedFileLogger.Parameters.set -> void
Microsoft.Build.BuildEngine.DistributedFileLogger.Shutdown() -> void
Microsoft.Build.BuildEngine.DistributedFileLogger.Verbosity.get -> Microsoft.Build.Framework.LoggerVerbosity
Microsoft.Build.BuildEngine.DistributedFileLogger.Verbosity.set -> void
Microsoft.Build.BuildEngine.Engine
Microsoft.Build.BuildEngine.Engine.BinPath.get -> string
Microsoft.Build.BuildEngine.Engine.BinPath.set -> void
Microsoft.Build.BuildEngine.Engine.BuildEnabled.get -> bool
Microsoft.Build.BuildEngine.Engine.BuildEnabled.set -> void
Microsoft.Build.BuildEngine.Engine.BuildProject(Microsoft.Build.BuildEngine.Project project) -> bool
Microsoft.Build.BuildEngine.Engine.BuildProject(Microsoft.Build.BuildEngine.Project project, string targetName) -> bool
Microsoft.Build.BuildEngine.Engine.BuildProject(Microsoft.Build.BuildEngine.Project project, string[] targetNames) -> bool
Microsoft.Build.BuildEngine.Engine.BuildProject(Microsoft.Build.BuildEngine.Project project, string[] targetNames, System.Collections.IDictionary targetOutputs) -> bool
Microsoft.Build.BuildEngine.Engine.BuildProject(Microsoft.Build.BuildEngine.Project project, string[] targetNames, System.Collections.IDictionary targetOutputs, Microsoft.Build.BuildEngine.BuildSettings buildFlags) -> bool
Microsoft.Build.BuildEngine.Engine.BuildProjectFile(string projectFile) -> bool
Microsoft.Build.BuildEngine.Engine.BuildProjectFile(string projectFile, string targetName) -> bool
Microsoft.Build.BuildEngine.Engine.BuildProjectFile(string projectFile, string[] targetNames) -> bool
Microsoft.Build.BuildEngine.Engine.BuildProjectFile(string projectFile, string[] targetNames, Microsoft.Build.BuildEngine.BuildPropertyGroup globalProperties) -> bool
Microsoft.Build.BuildEngine.Engine.BuildProjectFile(string projectFile, string[] targetNames, Microsoft.Build.BuildEngine.BuildPropertyGroup globalProperties, System.Collections.IDictionary targetOutputs) -> bool
Microsoft.Build.BuildEngine.Engine.BuildProjectFile(string projectFile, string[] targetNames, Microsoft.Build.BuildEngine.BuildPropertyGroup globalProperties, System.Collections.IDictionary targetOutputs, Microsoft.Build.BuildEngine.BuildSettings buildFlags) -> bool
Microsoft.Build.BuildEngine.Engine.BuildProjectFile(string projectFile, string[] targetNames, Microsoft.Build.BuildEngine.BuildPropertyGroup globalProperties, System.Collections.IDictionary targetOutputs, Microsoft.Build.BuildEngine.BuildSettings buildFlags, string toolsVersion) -> bool
Microsoft.Build.BuildEngine.Engine.BuildProjectFiles(string[] projectFiles, string[][] targetNamesPerProject, Microsoft.Build.BuildEngine.BuildPropertyGroup[] globalPropertiesPerProject, System.Collections.IDictionary[] targetOutputsPerProject, Microsoft.Build.BuildEngine.BuildSettings buildFlags, string[] toolsVersions) -> bool
Microsoft.Build.BuildEngine.Engine.CreateNewProject() -> Microsoft.Build.BuildEngine.Project
Microsoft.Build.BuildEngine.Engine.DefaultToolsVersion.get -> string
Microsoft.Build.BuildEngine.Engine.DefaultToolsVersion.set -> void
Microsoft.Build.BuildEngine.Engine.Engine() -> void
Microsoft.Build.BuildEngine.Engine.Engine(Microsoft.Build.BuildEngine.BuildPropertyGroup globalProperties) -> void
Microsoft.Build.BuildEngine.Engine.Engine(Microsoft.Build.BuildEngine.BuildPropertyGroup globalProperties, Microsoft.Build.BuildEngine.ToolsetDefinitionLocations locations) -> void
Microsoft.Build.BuildEngine.Engine.Engine(Microsoft.Build.BuildEngine.BuildPropertyGroup globalProperties, Microsoft.Build.BuildEngine.ToolsetDefinitionLocations locations, int numberOfCpus, string localNodeProviderParameters) -> void
Microsoft.Build.BuildEngine.Engine.Engine(Microsoft.Build.BuildEngine.ToolsetDefinitionLocations locations) -> void
Microsoft.Build.BuildEngine.Engine.Engine(string binPath) -> void
Microsoft.Build.BuildEngine.Engine.GetLoadedProject(string projectFullFileName) -> Microsoft.Build.BuildEngine.Project
Microsoft.Build.BuildEngine.Engine.GlobalProperties.get -> Microsoft.Build.BuildEngine.BuildPropertyGroup
Microsoft.Build.BuildEngine.Engine.GlobalProperties.set -> void
Microsoft.Build.BuildEngine.Engine.IsBuilding.get -> bool
Microsoft.Build.BuildEngine.Engine.OnlyLogCriticalEvents.get -> bool
Microsoft.Build.BuildEngine.Engine.OnlyLogCriticalEvents.set -> void
Microsoft.Build.BuildEngine.Engine.RegisterDistributedLogger(Microsoft.Build.Framework.ILogger centralLogger, Microsoft.Build.BuildEngine.LoggerDescription forwardingLogger) -> void
Microsoft.Build.BuildEngine.Engine.RegisterLogger(Microsoft.Build.Framework.ILogger logger) -> void
Microsoft.Build.BuildEngine.Engine.Shutdown() -> void
Microsoft.Build.BuildEngine.Engine.Toolsets.get -> Microsoft.Build.BuildEngine.ToolsetCollection
Microsoft.Build.BuildEngine.Engine.UnloadAllProjects() -> void
Microsoft.Build.BuildEngine.Engine.UnloadProject(Microsoft.Build.BuildEngine.Project project) -> void
Microsoft.Build.BuildEngine.Engine.UnregisterAllLoggers() -> void
Microsoft.Build.BuildEngine.FileLogger
Microsoft.Build.BuildEngine.FileLogger.FileLogger() -> void
Microsoft.Build.BuildEngine.Import
Microsoft.Build.BuildEngine.Import.Condition.get -> string
Microsoft.Build.BuildEngine.Import.Condition.set -> void
Microsoft.Build.BuildEngine.Import.EvaluatedProjectPath.get -> string
Microsoft.Build.BuildEngine.Import.IsImported.get -> bool
Microsoft.Build.BuildEngine.Import.ProjectPath.get -> string
Microsoft.Build.BuildEngine.Import.ProjectPath.set -> void
Microsoft.Build.BuildEngine.ImportCollection
Microsoft.Build.BuildEngine.ImportCollection.AddNewImport(string projectFile, string condition) -> void
Microsoft.Build.BuildEngine.ImportCollection.CopyTo(Microsoft.Build.BuildEngine.Import[] array, int index) -> void
Microsoft.Build.BuildEngine.ImportCollection.CopyTo(System.Array array, int index) -> void
Microsoft.Build.BuildEngine.ImportCollection.Count.get -> int
Microsoft.Build.BuildEngine.ImportCollection.GetEnumerator() -> System.Collections.IEnumerator
Microsoft.Build.BuildEngine.ImportCollection.IsSynchronized.get -> bool
Microsoft.Build.BuildEngine.ImportCollection.RemoveImport(Microsoft.Build.BuildEngine.Import importToRemove) -> void
Microsoft.Build.BuildEngine.ImportCollection.SyncRoot.get -> object
Microsoft.Build.BuildEngine.InternalLoggerException
Microsoft.Build.BuildEngine.InternalLoggerException.BuildEventArgs.get -> Microsoft.Build.Framework.BuildEventArgs
Microsoft.Build.BuildEngine.InternalLoggerException.ErrorCode.get -> string
Microsoft.Build.BuildEngine.InternalLoggerException.HelpKeyword.get -> string
Microsoft.Build.BuildEngine.InternalLoggerException.InitializationException.get -> bool
Microsoft.Build.BuildEngine.InternalLoggerException.InternalLoggerException() -> void
Microsoft.Build.BuildEngine.InternalLoggerException.InternalLoggerException(string message) -> void
Microsoft.Build.BuildEngine.InternalLoggerException.InternalLoggerException(string message, System.Exception innerException) -> void
Microsoft.Build.BuildEngine.InvalidProjectFileException
Microsoft.Build.BuildEngine.InvalidProjectFileException.BaseMessage.get -> string
Microsoft.Build.BuildEngine.InvalidProjectFileException.ColumnNumber.get -> int
Microsoft.Build.BuildEngine.InvalidProjectFileException.EndColumnNumber.get -> int
Microsoft.Build.BuildEngine.InvalidProjectFileException.EndLineNumber.get -> int
Microsoft.Build.BuildEngine.InvalidProjectFileException.ErrorCode.get -> string
Microsoft.Build.BuildEngine.InvalidProjectFileException.ErrorSubcategory.get -> string
Microsoft.Build.BuildEngine.InvalidProjectFileException.HelpKeyword.get -> string
Microsoft.Build.BuildEngine.InvalidProjectFileException.InvalidProjectFileException() -> void
Microsoft.Build.BuildEngine.InvalidProjectFileException.InvalidProjectFileException(string message) -> void
Microsoft.Build.BuildEngine.InvalidProjectFileException.InvalidProjectFileException(string message, System.Exception innerException) -> void
Microsoft.Build.BuildEngine.InvalidProjectFileException.InvalidProjectFileException(string projectFile, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string errorSubcategory, string errorCode, string helpKeyword) -> void
Microsoft.Build.BuildEngine.InvalidProjectFileException.InvalidProjectFileException(System.Xml.XmlNode xmlNode, string message, string errorSubcategory, string errorCode, string helpKeyword) -> void
Microsoft.Build.BuildEngine.InvalidProjectFileException.LineNumber.get -> int
Microsoft.Build.BuildEngine.InvalidProjectFileException.ProjectFile.get -> string
Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException
Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.ErrorCode.get -> string
Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.InvalidToolsetDefinitionException() -> void
Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.InvalidToolsetDefinitionException(string message) -> void
Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.InvalidToolsetDefinitionException(string message, string errorCode) -> void
Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.InvalidToolsetDefinitionException(string message, string errorCode, System.Exception innerException) -> void
Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.InvalidToolsetDefinitionException(string message, System.Exception innerException) -> void
Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.InvalidToolsetDefinitionException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
Microsoft.Build.BuildEngine.LocalNode
Microsoft.Build.BuildEngine.LoggerDescription
Microsoft.Build.BuildEngine.LoggerDescription.LoggerDescription(string loggerClassName, string loggerAssemblyName, string loggerAssemblyFile, string loggerSwitchParameters, Microsoft.Build.Framework.LoggerVerbosity verbosity) -> void
Microsoft.Build.BuildEngine.LoggerDescription.LoggerSwitchParameters.get -> string
Microsoft.Build.BuildEngine.LoggerDescription.Verbosity.get -> Microsoft.Build.Framework.LoggerVerbosity
Microsoft.Build.BuildEngine.Project
Microsoft.Build.BuildEngine.Project.AddNewImport(string projectFile, string condition) -> void
Microsoft.Build.BuildEngine.Project.AddNewItem(string itemName, string itemInclude) -> Microsoft.Build.BuildEngine.BuildItem
Microsoft.Build.BuildEngine.Project.AddNewItem(string itemName, string itemInclude, bool treatItemIncludeAsLiteral) -> Microsoft.Build.BuildEngine.BuildItem
Microsoft.Build.BuildEngine.Project.AddNewItemGroup() -> Microsoft.Build.BuildEngine.BuildItemGroup
Microsoft.Build.BuildEngine.Project.AddNewPropertyGroup(bool insertAtEndOfProject) -> Microsoft.Build.BuildEngine.BuildPropertyGroup
Microsoft.Build.BuildEngine.Project.AddNewUsingTaskFromAssemblyFile(string taskName, string assemblyFile) -> void
Microsoft.Build.BuildEngine.Project.AddNewUsingTaskFromAssemblyName(string taskName, string assemblyName) -> void
Microsoft.Build.BuildEngine.Project.Build() -> bool
Microsoft.Build.BuildEngine.Project.Build(string targetName) -> bool
Microsoft.Build.BuildEngine.Project.Build(string[] targetNames) -> bool
Microsoft.Build.BuildEngine.Project.Build(string[] targetNames, System.Collections.IDictionary targetOutputs) -> bool
Microsoft.Build.BuildEngine.Project.Build(string[] targetNames, System.Collections.IDictionary targetOutputs, Microsoft.Build.BuildEngine.BuildSettings buildFlags) -> bool
Microsoft.Build.BuildEngine.Project.BuildEnabled.get -> bool
Microsoft.Build.BuildEngine.Project.BuildEnabled.set -> void
Microsoft.Build.BuildEngine.Project.DefaultTargets.get -> string
Microsoft.Build.BuildEngine.Project.DefaultTargets.set -> void
Microsoft.Build.BuildEngine.Project.DefaultToolsVersion.get -> string
Microsoft.Build.BuildEngine.Project.DefaultToolsVersion.set -> void
Microsoft.Build.BuildEngine.Project.Encoding.get -> System.Text.Encoding
Microsoft.Build.BuildEngine.Project.EvaluatedItems.get -> Microsoft.Build.BuildEngine.BuildItemGroup
Microsoft.Build.BuildEngine.Project.EvaluatedItemsIgnoringCondition.get -> Microsoft.Build.BuildEngine.BuildItemGroup
Microsoft.Build.BuildEngine.Project.EvaluatedProperties.get -> Microsoft.Build.BuildEngine.BuildPropertyGroup
Microsoft.Build.BuildEngine.Project.FullFileName.get -> string
Microsoft.Build.BuildEngine.Project.FullFileName.set -> void
Microsoft.Build.BuildEngine.Project.GetConditionedPropertyValues(string propertyName) -> string[]
Microsoft.Build.BuildEngine.Project.GetEvaluatedItemsByName(string itemName) -> Microsoft.Build.BuildEngine.BuildItemGroup
Microsoft.Build.BuildEngine.Project.GetEvaluatedItemsByNameIgnoringCondition(string itemName) -> Microsoft.Build.BuildEngine.BuildItemGroup
Microsoft.Build.BuildEngine.Project.GetEvaluatedProperty(string propertyName) -> string
Microsoft.Build.BuildEngine.Project.GetProjectExtensions(string id) -> string
Microsoft.Build.BuildEngine.Project.GlobalProperties.get -> Microsoft.Build.BuildEngine.BuildPropertyGroup
Microsoft.Build.BuildEngine.Project.GlobalProperties.set -> void
Microsoft.Build.BuildEngine.Project.HasToolsVersionAttribute.get -> bool
Microsoft.Build.BuildEngine.Project.Imports.get -> Microsoft.Build.BuildEngine.ImportCollection
Microsoft.Build.BuildEngine.Project.InitialTargets.get -> string
Microsoft.Build.BuildEngine.Project.InitialTargets.set -> void
Microsoft.Build.BuildEngine.Project.IsDirty.get -> bool
Microsoft.Build.BuildEngine.Project.IsValidated.get -> bool
Microsoft.Build.BuildEngine.Project.IsValidated.set -> void
Microsoft.Build.BuildEngine.Project.ItemGroups.get -> Microsoft.Build.BuildEngine.BuildItemGroupCollection
Microsoft.Build.BuildEngine.Project.Load(string projectFileName) -> void
Microsoft.Build.BuildEngine.Project.Load(string projectFileName, Microsoft.Build.BuildEngine.ProjectLoadSettings projectLoadSettings) -> void
Microsoft.Build.BuildEngine.Project.Load(System.IO.TextReader textReader) -> void
Microsoft.Build.BuildEngine.Project.Load(System.IO.TextReader textReader, Microsoft.Build.BuildEngine.ProjectLoadSettings projectLoadSettings) -> void
Microsoft.Build.BuildEngine.Project.LoadXml(string projectXml) -> void
Microsoft.Build.BuildEngine.Project.LoadXml(string projectXml, Microsoft.Build.BuildEngine.ProjectLoadSettings projectLoadSettings) -> void
Microsoft.Build.BuildEngine.Project.MarkProjectAsDirty() -> void
Microsoft.Build.BuildEngine.Project.ParentEngine.get -> Microsoft.Build.BuildEngine.Engine
Microsoft.Build.BuildEngine.Project.Project() -> void
Microsoft.Build.BuildEngine.Project.Project(Microsoft.Build.BuildEngine.Engine engine) -> void
Microsoft.Build.BuildEngine.Project.Project(Microsoft.Build.BuildEngine.Engine engine, string toolsVersion) -> void
Microsoft.Build.BuildEngine.Project.PropertyGroups.get -> Microsoft.Build.BuildEngine.BuildPropertyGroupCollection
Microsoft.Build.BuildEngine.Project.RemoveAllItemGroups() -> void
Microsoft.Build.BuildEngine.Project.RemoveAllPropertyGroups() -> void
Microsoft.Build.BuildEngine.Project.RemoveImportedPropertyGroup(Microsoft.Build.BuildEngine.BuildPropertyGroup propertyGroupToRemove) -> void
Microsoft.Build.BuildEngine.Project.RemoveItem(Microsoft.Build.BuildEngine.BuildItem itemToRemove) -> void
Microsoft.Build.BuildEngine.Project.RemoveItemGroup(Microsoft.Build.BuildEngine.BuildItemGroup itemGroupToRemove) -> void
Microsoft.Build.BuildEngine.Project.RemoveItemGroupsWithMatchingCondition(string matchCondition) -> void
Microsoft.Build.BuildEngine.Project.RemoveItemsByName(string itemName) -> void
Microsoft.Build.BuildEngine.Project.RemovePropertyGroup(Microsoft.Build.BuildEngine.BuildPropertyGroup propertyGroupToRemove) -> void
Microsoft.Build.BuildEngine.Project.RemovePropertyGroupsWithMatchingCondition(string matchCondition) -> void
Microsoft.Build.BuildEngine.Project.RemovePropertyGroupsWithMatchingCondition(string matchCondition, bool includeImportedPropertyGroups) -> void
Microsoft.Build.BuildEngine.Project.ResetBuildStatus() -> void
Microsoft.Build.BuildEngine.Project.Save(string projectFileName) -> void
Microsoft.Build.BuildEngine.Project.Save(string projectFileName, System.Text.Encoding encoding) -> void
Microsoft.Build.BuildEngine.Project.Save(System.IO.TextWriter textWriter) -> void
Microsoft.Build.BuildEngine.Project.SchemaFile.get -> string
Microsoft.Build.BuildEngine.Project.SchemaFile.set -> void
Microsoft.Build.BuildEngine.Project.SetImportedProperty(string propertyName, string propertyValue, string condition, Microsoft.Build.BuildEngine.Project importedProject, Microsoft.Build.BuildEngine.PropertyPosition position) -> void
Microsoft.Build.BuildEngine.Project.SetImportedProperty(string propertyName, string propertyValue, string condition, Microsoft.Build.BuildEngine.Project importedProject, Microsoft.Build.BuildEngine.PropertyPosition position, bool treatPropertyValueAsLiteral) -> void
Microsoft.Build.BuildEngine.Project.SetImportedProperty(string propertyName, string propertyValue, string condition, Microsoft.Build.BuildEngine.Project importProject) -> void
Microsoft.Build.BuildEngine.Project.SetProjectExtensions(string id, string content) -> void
Microsoft.Build.BuildEngine.Project.SetProperty(string propertyName, string propertyValue) -> void
Microsoft.Build.BuildEngine.Project.SetProperty(string propertyName, string propertyValue, string condition) -> void
Microsoft.Build.BuildEngine.Project.SetProperty(string propertyName, string propertyValue, string condition, Microsoft.Build.BuildEngine.PropertyPosition position) -> void
Microsoft.Build.BuildEngine.Project.SetProperty(string propertyName, string propertyValue, string condition, Microsoft.Build.BuildEngine.PropertyPosition position, bool treatPropertyValueAsLiteral) -> void
Microsoft.Build.BuildEngine.Project.Targets.get -> Microsoft.Build.BuildEngine.TargetCollection
Microsoft.Build.BuildEngine.Project.TimeOfLastDirty.get -> System.DateTime
Microsoft.Build.BuildEngine.Project.ToolsVersion.get -> string
Microsoft.Build.BuildEngine.Project.UsingTasks.get -> Microsoft.Build.BuildEngine.UsingTaskCollection
Microsoft.Build.BuildEngine.Project.Xml.get -> string
Microsoft.Build.BuildEngine.ProjectLoadSettings
Microsoft.Build.BuildEngine.ProjectLoadSettings.IgnoreMissingImports = 1 -> Microsoft.Build.BuildEngine.ProjectLoadSettings
Microsoft.Build.BuildEngine.ProjectLoadSettings.None = 0 -> Microsoft.Build.BuildEngine.ProjectLoadSettings
Microsoft.Build.BuildEngine.PropertyPosition
Microsoft.Build.BuildEngine.PropertyPosition.UseExistingOrCreateAfterLastImport = 1 -> Microsoft.Build.BuildEngine.PropertyPosition
Microsoft.Build.BuildEngine.PropertyPosition.UseExistingOrCreateAfterLastPropertyGroup = 0 -> Microsoft.Build.BuildEngine.PropertyPosition
Microsoft.Build.BuildEngine.RemoteErrorException
Microsoft.Build.BuildEngine.SolutionWrapperProject
Microsoft.Build.BuildEngine.Target
Microsoft.Build.BuildEngine.Target.AddNewTask(string taskName) -> Microsoft.Build.BuildEngine.BuildTask
Microsoft.Build.BuildEngine.Target.Condition.get -> string
Microsoft.Build.BuildEngine.Target.Condition.set -> void
Microsoft.Build.BuildEngine.Target.DependsOnTargets.get -> string
Microsoft.Build.BuildEngine.Target.DependsOnTargets.set -> void
Microsoft.Build.BuildEngine.Target.GetEnumerator() -> System.Collections.IEnumerator
Microsoft.Build.BuildEngine.Target.Inputs.get -> string
Microsoft.Build.BuildEngine.Target.Inputs.set -> void
Microsoft.Build.BuildEngine.Target.IsImported.get -> bool
Microsoft.Build.BuildEngine.Target.Name.get -> string
Microsoft.Build.BuildEngine.Target.Outputs.get -> string
Microsoft.Build.BuildEngine.Target.Outputs.set -> void
Microsoft.Build.BuildEngine.Target.RemoveTask(Microsoft.Build.BuildEngine.BuildTask taskElement) -> void
Microsoft.Build.BuildEngine.TargetCollection
Microsoft.Build.BuildEngine.TargetCollection.AddNewTarget(string targetName) -> Microsoft.Build.BuildEngine.Target
Microsoft.Build.BuildEngine.TargetCollection.CopyTo(System.Array array, int index) -> void
Microsoft.Build.BuildEngine.TargetCollection.Count.get -> int
Microsoft.Build.BuildEngine.TargetCollection.Exists(string targetName) -> bool
Microsoft.Build.BuildEngine.TargetCollection.GetEnumerator() -> System.Collections.IEnumerator
Microsoft.Build.BuildEngine.TargetCollection.IsSynchronized.get -> bool
Microsoft.Build.BuildEngine.TargetCollection.RemoveTarget(Microsoft.Build.BuildEngine.Target targetToRemove) -> void
Microsoft.Build.BuildEngine.TargetCollection.SyncRoot.get -> object
Microsoft.Build.BuildEngine.TargetCollection.this[string index].get -> Microsoft.Build.BuildEngine.Target
Microsoft.Build.BuildEngine.Toolset
Microsoft.Build.BuildEngine.Toolset.BuildProperties.get -> Microsoft.Build.BuildEngine.BuildPropertyGroup
Microsoft.Build.BuildEngine.Toolset.Clone() -> Microsoft.Build.BuildEngine.Toolset
Microsoft.Build.BuildEngine.Toolset.Toolset(string toolsVersion, string toolsPath) -> void
Microsoft.Build.BuildEngine.Toolset.Toolset(string toolsVersion, string toolsPath, Microsoft.Build.BuildEngine.BuildPropertyGroup buildProperties) -> void
Microsoft.Build.BuildEngine.Toolset.ToolsPath.get -> string
Microsoft.Build.BuildEngine.Toolset.ToolsVersion.get -> string
Microsoft.Build.BuildEngine.ToolsetCollection
Microsoft.Build.BuildEngine.ToolsetCollection.Add(Microsoft.Build.BuildEngine.Toolset item) -> void
Microsoft.Build.BuildEngine.ToolsetCollection.Clear() -> void
Microsoft.Build.BuildEngine.ToolsetCollection.Contains(Microsoft.Build.BuildEngine.Toolset item) -> bool
Microsoft.Build.BuildEngine.ToolsetCollection.Contains(string toolsVersion) -> bool
Microsoft.Build.BuildEngine.ToolsetCollection.CopyTo(Microsoft.Build.BuildEngine.Toolset[] array, int arrayIndex) -> void
Microsoft.Build.BuildEngine.ToolsetCollection.Count.get -> int
Microsoft.Build.BuildEngine.ToolsetCollection.GetEnumerator() -> System.Collections.Generic.IEnumerator<Microsoft.Build.BuildEngine.Toolset>
Microsoft.Build.BuildEngine.ToolsetCollection.IsReadOnly.get -> bool
Microsoft.Build.BuildEngine.ToolsetCollection.Remove(Microsoft.Build.BuildEngine.Toolset item) -> bool
Microsoft.Build.BuildEngine.ToolsetCollection.this[string toolsVersion].get -> Microsoft.Build.BuildEngine.Toolset
Microsoft.Build.BuildEngine.ToolsetCollection.ToolsVersions.get -> System.Collections.Generic.IEnumerable<string>
Microsoft.Build.BuildEngine.ToolsetDefinitionLocations
Microsoft.Build.BuildEngine.ToolsetDefinitionLocations.ConfigurationFile = 1 -> Microsoft.Build.BuildEngine.ToolsetDefinitionLocations
Microsoft.Build.BuildEngine.ToolsetDefinitionLocations.None = 0 -> Microsoft.Build.BuildEngine.ToolsetDefinitionLocations
Microsoft.Build.BuildEngine.ToolsetDefinitionLocations.Registry = 2 -> Microsoft.Build.BuildEngine.ToolsetDefinitionLocations
Microsoft.Build.BuildEngine.UsingTask
Microsoft.Build.BuildEngine.UsingTask.AssemblyFile.get -> string
Microsoft.Build.BuildEngine.UsingTask.AssemblyName.get -> string
Microsoft.Build.BuildEngine.UsingTask.Condition.get -> string
Microsoft.Build.BuildEngine.UsingTask.IsImported.get -> bool
Microsoft.Build.BuildEngine.UsingTask.TaskName.get -> string
Microsoft.Build.BuildEngine.UsingTaskCollection
Microsoft.Build.BuildEngine.UsingTaskCollection.CopyTo(Microsoft.Build.BuildEngine.UsingTask[] array, int index) -> void
Microsoft.Build.BuildEngine.UsingTaskCollection.CopyTo(System.Array array, int index) -> void
Microsoft.Build.BuildEngine.UsingTaskCollection.Count.get -> int
Microsoft.Build.BuildEngine.UsingTaskCollection.GetEnumerator() -> System.Collections.IEnumerator
Microsoft.Build.BuildEngine.UsingTaskCollection.IsSynchronized.get -> bool
Microsoft.Build.BuildEngine.UsingTaskCollection.SyncRoot.get -> object
Microsoft.Build.BuildEngine.Utilities
Microsoft.Build.BuildEngine.WriteHandler
override Microsoft.Build.BuildEngine.BuildProperty.ToString() -> string
override Microsoft.Build.BuildEngine.FileLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource) -> void
override Microsoft.Build.BuildEngine.FileLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource, int nodeCount) -> void
override Microsoft.Build.BuildEngine.FileLogger.Shutdown() -> void
override Microsoft.Build.BuildEngine.InternalLoggerException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
override Microsoft.Build.BuildEngine.InvalidProjectFileException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
override Microsoft.Build.BuildEngine.InvalidProjectFileException.Message.get -> string
override Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
override Microsoft.Build.BuildEngine.RemoteErrorException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
static Microsoft.Build.BuildEngine.BuildProperty.explicit operator string(Microsoft.Build.BuildEngine.BuildProperty propertyToCast) -> string
static Microsoft.Build.BuildEngine.Engine.GlobalEngine.get -> Microsoft.Build.BuildEngine.Engine
static Microsoft.Build.BuildEngine.Engine.Version.get -> System.Version
static Microsoft.Build.BuildEngine.LocalNode.StartLocalNodeServer(int nodeNumber) -> void
static Microsoft.Build.BuildEngine.SolutionWrapperProject.Generate(string solutionPath, string toolsVersionOverride, Microsoft.Build.Framework.BuildEventContext projectBuildEventContext) -> string
static Microsoft.Build.BuildEngine.Utilities.Escape(string unescapedExpression) -> string
virtual Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.ForwardToCentralLogger(Microsoft.Build.Framework.BuildEventArgs e) -> void
virtual Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource) -> void
virtual Microsoft.Build.BuildEngine.ConfigurableForwardingLogger.Shutdown() -> void
virtual Microsoft.Build.BuildEngine.ConsoleLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource) -> void
virtual Microsoft.Build.BuildEngine.ConsoleLogger.Initialize(Microsoft.Build.Framework.IEventSource eventSource, int nodeCount) -> void
virtual Microsoft.Build.BuildEngine.ConsoleLogger.Shutdown() -> void